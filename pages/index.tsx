import Head from "next/head";
import { getAllTags, getPostsForTopPage } from "../lib/notionAPI";
import SinglePost from "../components/Post/SinglePost";
import { GetStaticProps } from "next";
import Link from "next/link";
import Tag from "../components/Tag/Tag";

// type Props = {
//   allPosts: PageObjectResponse[] | PartialPageObjectResponse[];
// };

export const getStaticProps: GetStaticProps = async () => {
  const fourPosts = await getPostsForTopPage(4);
  const allTags = await getAllTags();

  return {
    props: {
      fourPosts: fourPosts,
      allTags,
    },
    revalidate: 60, //60초마다 재갱신한다는 의미 ssg도 하면서 60초마다 새로운 내용으로 갱신해간다는 것이 ISA라는 의미가 된다
  };
};

// const inter = Inter({ subsets: ["latin"] });

export default function Home({ fourPosts, allTags }: any) {
  return (
    <div className="container h-full w-full mx-auto">
      <Head>
        <title>Notion-Blog</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container w-full mt-16">
        <h1 className="text-5xl font-medium   text-center mb-16">
          Notion Bolg
        </h1>
        {fourPosts.map((post: any) => (
          <div className="mx-4" key={post.id}>
            <SinglePost
              title={post.title}
              description={post.description}
              date={post.date}
              tags={post.tags}
              slug={post.slug}
              isPaginationPage={false}
            />
          </div>
        ))}
        <Link
          href="/posts/page/1"
          className=" mb-6 lg:w-1/2 mx-auto  px-5 block text-right"
        >
          ...もっと見る
        </Link>
        <Tag tags={allTags} />
      </main>
    </div>
  );
}
//() 로 감싸면 해당 함수의 반환값을 감싸는 역할을 하게 됩니다. 이를 통해 함수 내에서 여러 줄에 걸쳐 JSX를 작성할 수 있음
//반면, {}로 감싸게 되면 해당 함수에서 명시적으로 return 키워드를 사용하여 반환값을 반환해야 한다
//React.FC는 React에서 함수형 컴포넌트를 정의할 때 사용되는 타입
//. 이 타입은 함수형 컴포넌트가 React.Element를 반환하도록 하며, 컴포넌트의 프로퍼티(prop)를 정의할 수 있게 해줍니다.

// import Head from "next/head";
// import Image from "next/image";
// import { Inter } from "@next/font/google";
// import { getAllPosts } from "../lib/notionAPI";
// import {
//   PageObjectResponse,
//   PartialPageObjectResponse,
// } from "@notionhq/client/build/src/api-endpoints";

// type Props = {
//   allPosts: PageObjectResponse[] | PartialPageObjectResponse[];
// };

// export const getStaticProps = async () => {
//   const allPosts = await getAllPosts();
//   return {
//     props: {
//       allPosts: allPosts ,
//     },
//     revalidate: 60, //60초마다 재갱신한다는 의미 ssg도 하면서 60초마다 새로운 내용으로 갱신해간다는 것이 ISA라는 의미가 된다
//   };
// };

// // const inter = Inter({ subsets: ["latin"] });
// export default function Home({ allPosts }: Props): JSX.Element {
//   console.log(allPosts, "allPostss");
//   return (
//     <>
//       <Head>
//         <title>Create Next App</title>
//         <meta name="description" content="Generated by create next app" />
//         <meta name="viewport" content="width=device-width, initial-scale=1" />
//         <link rel="icon" href="/favicon.ico" />
//       </Head>
//     </>
//   );
// }

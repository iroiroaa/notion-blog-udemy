import Head from "next/head";
import {
  getAllTags,
  getNumberOfPages,
  getNumberOfPagesByTag,
  getPostsByPage,
  getPostsByTagAndPage,
  getPostsForTopPage,
} from "../../../../../lib/notionAPI";
import SinglePost from "../../../../../components/Post/SinglePost";
import { GetStaticPaths, GetStaticProps } from "next";
import Pagination from "../../../../../components/Pagination/Pagination";
import Tag from "../../../../../components/Tag/Tag";
//런타임 시점
// 애플리케이션이 실행 중일때의 시점을 의미함.
//  런타임 시점은 애플리케이션이 동작하여 사용자의 요청에 따라 동적으로 페이지를 생성하는 시점입니다
// 빌드 시점에서 생성된 정적 파일은 런타임 시점에서 서버나 클라이언트에서 사용됩니다.

//빌드 시점에 실행, 해당 페이지의 경로를 미리 생성함 ,

//Promise.all은 여러개의 프로미스를 받아 모든 프로미스가 완료될 때 까지 기다렸다가, 모든 프로미스가 완료되면 그 결과 값을 반환
// 이를 이용하면 여러개의 비동기 처리를 병럴로 처리하고 모든 결과를 한꺼번에 받아올 수 있음

//resolve(이행)은 pending상태인 프로미스가 결과값을 반환하여  fulfilled(이행됨) 상태가 되는 것을 말함 .
// 이 때 결과값은 then메서드로 전달됨
export const getStaticPaths: GetStaticPaths = async () => {
  const allTags = await getAllTags();
  let params: any = [];
  await Promise.all(
    allTags.map((tag: string) => {
      return getNumberOfPagesByTag(tag).then((numberOfPageByTag: number) => {
        for (let i = 1; i <= numberOfPageByTag; i++) {
          params.push({ params: { tag: tag, page: i.toString() } });
        }
      });
    })
  );

  return {
    paths: params,
    fallback: "blocking",
  };
};
// fallback
//빌드 타임에 생성해놓지 않은 path로 요청이 들어온 경우 어떻게 할지 정하는 boolean 또는 'blocking' 값이다
// fallback: "blocking"으로 설정되어 있는 경우, 빌드 시점에 기본적인 정적 페이지를 빌드하여 미리 생성한다.
//그러나 기본 정적 페이지 외에 사용자가 접근하는 페이지는 서버 측에서 동적으로 렌더링하고,
//렌더링된 페이지는 캐시되어 다음에 같은 페이지에 접근할 때 다시 생성할 필요 없이 빠르게 전송된다.
//이 방식은 빠른 페이지 로딩과 SEO 최적화를 모두 충족시키는 장점이 있다
//"blocking"으로 설정된 경우에는 이 페이지를 동적으로 생성하는 것이 getStaticProps의 역할이 됩니다
export const getStaticProps: GetStaticProps = async (context) => {
  const currentPage: string | undefined = context.params?.page?.toString();

  const currentTag: string | undefined = context.params?.tag?.toString();
  const posts = await getPostsByTagAndPage(
    currentTag!,
    parseInt(currentPage!, 10)
  );
  const allTags = await getAllTags();
  const numberOfPagesByTag = await getNumberOfPagesByTag(currentTag!);
  return {
    props: {
      posts,
      numberOfPagesByTag,
      currentTag,
      allTags,
    },
    revalidate: 60, //60초마다 재갱신한다는 의미 ssg도 하면서 60초마다 새로운 내용으로 갱신해간다는 것이 ISA라는 의미가 된다
  };
};

const BlogTagPageList = ({
  numberOfPagesByTag,
  posts,
  currentTag,
  allTags,
}: any) => {
  return (
    <div className="container h-full w-full mx-auto">
      <Head>
        <title>Notion-Blog</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container w-full mt-16">
        <h1 className="text-5xl font-medium   text-center mb-16">
          Notion Bolg
        </h1>
        <section className="sm:grid grid-cols-2 w-5/6 gap-3 mx-auto">
          {posts.map((post: any) => (
            <div key={post.id}>
              <SinglePost
                title={post.title}
                description={post.description}
                date={post.date}
                tags={post.tags}
                slug={post.slug}
                isPaginationPage={true}
              />
            </div>
          ))}
        </section>
        <Pagination numberOfPage={numberOfPagesByTag} tag={currentTag} />
        <Tag tags={allTags} />
      </main>
    </div>
  );
};

export default BlogTagPageList;
